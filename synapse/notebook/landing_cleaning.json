{
	"name": "landing_cleaning",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "cdcsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "78b8234c-b435-4952-89ef-71fbb8adc606"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/91b6e3ed-6c42-4e7a-8ed3-57f49a2a42ba/resourceGroups/SB_RelDB_CDC_Streaming/providers/Microsoft.Synapse/workspaces/asa-cdc-streaming/bigDataPools/cdcsparkpool",
				"name": "cdcsparkpool",
				"type": "Spark",
				"endpoint": "https://asa-cdc-streaming.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/cdcsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import datetime\r\n",
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\r\n",
					"from azure.identity import DefaultAzureCredential\r\n",
					"\r\n",
					"def clean_old_blobs(storage_account_url, container_name):\r\n",
					"    current_date_time = datetime.datetime.now(tz=datetime.timezone.utc)\r\n",
					"    credential = DefaultAzureCredential()\r\n",
					"    blob_service_client = BlobServiceClient(account_url=storage_account_url, credential=credential)\r\n",
					"    container_client = blob_service_client.get_container_client(container_name)\r\n",
					"    blob_list = container_client.list_blobs()\r\n",
					"    \r\n",
					"    for blob in blob_list:\r\n",
					"        _, year, month, day, hour, _ = blob.name.split('/', 5)\r\n",
					"\r\n",
					"        blob_date_time = datetime.datetime(int(year), int(month), int(day), int(hour), tzinfo=datetime.timezone.utc)\r\n",
					"\r\n",
					"        # Delete blobs older than 90days\r\n",
					"        if current_date_time - blob_date_time > datetime.timedelta(days=90):\r\n",
					"            print(f\"Deleting blob: {blob.name}\")\r\n",
					"            blob_client = blob_service_client.get_blob_client(container_name, blob.name)\r\n",
					"            blob_client.delete_blob()\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"STORAGE_ACCOUNT_URL = \"https://dlcdcstreaming.dfs.core.windows.net\"\r\n",
					"CONTAINER_NAME = \"dlcdcstreaming\"\r\n",
					"\r\n",
					"clean_old_blobs(STORAGE_ACCOUNT_URL, CONTAINER_NAME)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}