{
	"name": "event_hubs_streaming_clean",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "cdcsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c5b3ed61-419b-467f-82ee-493a3f66c3f6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/91b6e3ed-6c42-4e7a-8ed3-57f49a2a42ba/resourceGroups/SB_RelDB_CDC_Streaming/providers/Microsoft.Synapse/workspaces/asa-cdc-streaming/bigDataPools/cdcsparkpool",
				"name": "cdcsparkpool",
				"type": "Spark",
				"endpoint": "https://asa-cdc-streaming.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/cdcsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, LongType, IntegerType, FloatType, BooleanType, TimestampType\r\n",
					"# from schemabuild.helpers import spark_avro_deserializer"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"keyVaultName = \"cdc-streaming-kv2\"\r\n",
					"secretName = \"eh-connstring\"\r\n",
					"connectionString = mssparkutils.credentials.getSecret(keyVaultName, secretName)\r\n",
					"EH_name = \"wwi-04\"\r\n",
					"connectionStringEntity = connectionString + \";EntityPath=\" + EH_name\r\n",
					"consumer_group = \"$Default\"\r\n",
					"\r\n",
					"checkpoint_loc = \"abfss://dlcdcstreaming@dlcdcstreaming.dfs.core.windows.net/landing/orders/checkpoint/\"\r\n",
					"output_loc = \"abfss://dlcdcstreaming@dlcdcstreaming.dfs.core.windows.net/landing/orders/output/\"\r\n",
					"\r\n",
					"# Create the starting position Dictionary\r\n",
					"startingEventPosition = {\r\n",
					"  \"offset\": \"-1\",         \r\n",
					"  \"seqNo\": 0,                   # not in use\r\n",
					"  \"enqueuedTime\": None,         # not in use\r\n",
					"  \"isInclusive\": True,\r\n",
					"  \"fromStartOfStream\": True     # start from beginning of Stream\r\n",
					"}\r\n",
					"\r\n",
					"ehConf = {\r\n",
					"  \"eventhubs.startingPosition\" : json.dumps(startingEventPosition),\r\n",
					"  \"setMaxEventsPerTrigger\" : 100,\r\n",
					"  \"eventhubs.consumerGroup\" : consumer_group\r\n",
					"}\r\n",
					"\r\n",
					"ehConf[\"eventhubs.connectionString\"] = sc._jvm.org.apache.spark.eventhubs.EventHubsUtils.encrypt(connectionStringEntity)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"OBJ_SCHEMA_MAP = {\r\n",
					"    'orders': (\r\n",
					"        StructType()    \\\r\n",
					"        .add(\"OrderID\", IntegerType()) \\\r\n",
					"        .add(\"CustomerID\", IntegerType())  \\\r\n",
					"        .add(\"SalespersonPersonID\", IntegerType()) \\\r\n",
					"        .add(\"PickedByPersonID\", IntegerType())    \\\r\n",
					"        .add(\"ContactPersonID\", IntegerType()) \\\r\n",
					"        .add(\"BackorderOrderID\", IntegerType())    \\\r\n",
					"        .add(\"OrderDate\", IntegerType())   \\\r\n",
					"        .add(\"ExpectedDeliveryDate\", IntegerType())    \\\r\n",
					"        .add(\"CustomerPurchaseOrderNumber\", StringType())  \\\r\n",
					"        .add(\"IsUndersupplyBackordered\", BooleanType())    \\\r\n",
					"        .add(\"Comments\", StringType()) \\\r\n",
					"        .add(\"DeliveryInstructions\", StringType())   \\\r\n",
					"        .add(\"InternalComments\", StringType()) \\\r\n",
					"        .add(\"PickingCompletedWhen\", LongType())   \\\r\n",
					"        .add(\"LastEditedBy\", IntegerType())    \\\r\n",
					"        .add(\"LastEditedWhen\", LongType())),\r\n",
					"}\r\n",
					"    \r\n",
					"def get_cdc_schema(obj_name: str):\r\n",
					"    # if obj_name not in OBJ_SCHEMA_MAP.keys():\r\n",
					"    #     raise KeyError\r\n",
					"    obj_schema = OBJ_SCHEMA_MAP[obj_name]\r\n",
					"    return (\r\n",
					"        StructType()\r\n",
					"        .add(\"op\", StringType())\r\n",
					"        .add(\"ts_ms\", LongType())\r\n",
					"        .add(\"before\", obj_schema)\r\n",
					"        .add(\"after\", obj_schema)\r\n",
					"    )\r\n",
					"\r\n",
					"def deserialize_cdc_msg(df: DataFrame, cdc_schema: StructType):\r\n",
					"        df_parsed = df.withColumn(\"parsed\", col(\"body\").cast(\"string\"))\r\n",
					"        \r\n",
					"        df_payload = df_parsed.select(\"parsed.payload\")\r\n",
					"\r\n",
					"        return (\r\n",
					"            df_payload.select(spark_avro_deserializer(col('payload')).alias('value'))\r\n",
					"                .withColumn('value', from_json('value', cdc_schema))\r\n",
					"                .select(\r\n",
					"                'value.op',\r\n",
					"                'value.after.*',\r\n",
					"                (col('value.ts_ms') / 1000).cast(TimestampType()).alias('ts'))\r\n",
					"        )\r\n",
					"        \r\n",
					"def deserialize_cdc_msg_json(df: DataFrame, cdc_schema: StructType):\r\n",
					"        df_payload = df.select('payload')\r\n",
					"\r\n",
					"        return (\r\n",
					"            df_payload.withColumn('value', from_json(to_json('payload'), cdc_schema))\r\n",
					"                .select(\r\n",
					"                'value.op',\r\n",
					"                'value.after.*',\r\n",
					"                (col('value.ts_ms') / 1000).cast(TimestampType()).alias('ts'))\r\n",
					"        )"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_raw = spark \\\r\n",
					"  .readStream \\\r\n",
					"  .format(\"eventhubs\") \\\r\n",
					"  .options(**ehConf) \\\r\n",
					"  .load()\r\n",
					"\r\n",
					"# df_parsed = df_raw.withColumn(\"parsed\", col(\"body\").cast(\"string\"))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check if is streaming\r\n",
					"print(df_raw.isStreaming)\r\n",
					"print(\"-----\")\r\n",
					"df_raw.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Check if is streaming\r\n",
					"# print(df_parsed.isStreaming)\r\n",
					"# print(\"-----\")\r\n",
					"# df_parsed.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cdc_schema = get_cdc_schema('orders')\r\n",
					"\r\n",
					"df_deserialized = deserialize_cdc_msg(df_raw, cdc_schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_deserialized.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Streaming Query in scheduler pool\r\n",
					"spark.sparkContext.setLocalProperty(\"spark.scheduler.pool\", \"pool0\")\r\n",
					"\r\n",
					"CDC_query = df_deserialized \\\r\n",
					"    .withColumn(\"year\", year(\"ts\"))   \\\r\n",
					"    .withColumn(\"month\", month(\"ts\"))   \\\r\n",
					"    .withColumn(\"day\", dayofmonth(\"ts\"))   \\\r\n",
					"    .withColumn(\"hour\", hour(\"ts\"))   \\\r\n",
					"    .writeStream    \\\r\n",
					"    .queryName(\"CDC_query\") \\\r\n",
					"    .format(\"parquet\")  \\\r\n",
					"    .partitionBy(\"year\", \"month\", \"day\", \"hour\")    \\\r\n",
					"    .outputMode(\"append\")   \\\r\n",
					"    .option(\"checkpointLocation\", checkpoint_loc)   \\\r\n",
					"    .option(\"path\", output_loc)    \\\r\n",
					"    .start()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# CDC_query.stop()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check the status of query\r\n",
					"\r\n",
					"print(CDC_query.isActive)\r\n",
					"print(\"-----\")\r\n",
					"print(CDC_query.exception())"
				],
				"execution_count": null
			}
		]
	}
}